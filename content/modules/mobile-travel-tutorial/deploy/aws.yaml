requirements: |
chapters:
  - title: Deploy
    lessons:
      - title: Spin Up & Install
        milestones:
          - title: Couchbase Server
            description: |

              To deploy Couchbase Mobile to production you must first get familiar with Couchbase Server. While it's certainly possible to run Sync Gateway in isolation for quick and agile development and testing, any production deployment needs Couchbase Server as the back-end. Luckily, connecting the two is incredibly easy. Even more luckily, both Couchbase Server and Sync Gateway are designed to be able to scale out easily and with zero downtime, meaning that we can start with a very small deployment and scale it up later to something that's production ready.

              In this lesson you'll learn how to deploy Couchbase Server on a cluster of machines. The workshop assumes you are using AWS EC2 instances for this, but any collection of machines should be fine with minimal adjustment to the instructions - all Couchbase Specific instructions should not need any adaptation.

              Couchbase Server can deployed on a whole host of [operating systems](http://www.couchbase.com/nosql-databases/downloads), but for this workshop we'll focus on using RHEL 7.


              ## Spin Up A Machine 

              - If you're using AWS EC2, this should be as simple as clicking **Launch Instance**:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/ec2_launch.png)

              - Let's use the basic RHEL 7 AMI:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/ec2_rhel.png)

              - For the instance type, we should really consider the [Sizing Recommendations](https://developer.couchbase.com/documentation/server/5.0/install/sizing-general.html), however we probably don't want to be spinning up a lot of huge instances just for this workshop, so `t2.micro` should be fine for our purposes today.

              - Click through the various **Next:...** options until you reach **Step 6: Configure Security Group**. Here you want to add the following ports `8091-8094`, `11210`, and `4984-4985` (these last two are for Sync Gateway, but this way we can reuse the same group):

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/ec2_sec_gp.png)

              - You'll be prompted to select a Key Pair, if you don't already have one you have access to (or like to keep things separate), create a new one which will download the appropriate `.pem` file.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/ec2_key_pair.png)

              - From the list of instances, select the instance we just launched make a note of the Public Address.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/ec2_dns.png)

              We can then use this and the `.pem` from the previous step to `ssh` into our new instance:

              ```bash
              $ sudo chmod 600 ./Workshop_AWS.pem
              $ ssh ec2-user@ec2-111-111-111-111.compute-1.amazonaws.com -i ./Workshop_AWS.pem
              ```

              **N.B. From here on, we'll use `$CB1` to represent this address to make following along easier.**

              ## Install Couchbase Server

              - Now we need to download the Couchbase Server package. If you're using the default RHEL 7 AMI, you'll need to install `wget` first:

                ```bash
                $ sudo yum install wget -y
                ```

              - Then actually download the package:

                ```bash
                $ wget http://packages.couchbase.com/releases/5.0.0/couchbase-server-enterprise-5.0.0-centos7.x86_64.rpm
                ```

              - Finally, install the package with `rpm`:

                ```bash
                $ sudo rpm -i couchbase-server-enterprise-5.0.0-centos7.x86_64.rpm
                ```

              - That's it, Couchbase Server is now running on this machine. We'll get into configuring it in the next lesson. For now, let's check the Couchbase Server instance by going to the Address (`$CB1`) and port `8091`, you should be greeted with this screen:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/welcome_wide.png)

          - title: Sync Gateway
            description: |
              Sync Gateway is the middleman server that exposes a database API for Couchbase Lite databases to replicate to and from. It connects internally to a Couchbase Server bucket to persist the documents. Again, in a production environment you would connect it to Couchbase Server, but for now let's concentrate on getting one started.

              As with the last section we'll assumes you are using AWS EC2 instances for this, but any collection of machines should be fine with minimal adjustment to the instructions - all Couchbase Specific instructions should not need any adaptation.

              The steps here are much the same as for Couchbase Server:

              ## Spin Up A Machine 

              - If you're using AWS EC2, this should be as simple as clicking **Launch Instance**:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/ec2_launch.png)

              - Let's use the basic RHEL 7 AMI:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/ec2_rhel.png)

              - For the instance type, we should really consider the [Sizing Recommendations](https://developer.couchbase.com/documentation/server/5.0/install/sizing-general.html), however we probably don't want to be spinning up a lot of huge instances just for this workshop, so `t2.micro` should be fine for our purposes today.

              - Click through the various **Next:...** options until you reach **Step 6: Configure Security Group**. Here you want to re-use the same group we created for Couchbase Server:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/ec2_sec_gp.png)

              - You'll be prompted to select a Key Pair. Again, it will most likely make sense to reuse the one from launching the Couchbase Server instance.

              - From the list of instances, select the instance we just launched make a note of the Public Address.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/ec2_dns.png)

              - We can then use this and the `.pem` from the previous step to `ssh` into our new instance:

                ```bash
                $ sudo chmod 600 ./Workshop_AWS.pem
                $ ssh ec2-user@ec2-111-111-111-112.compute-1.amazonaws.com -i ./Workshop_AWS.pem
                ```

              **N.B. Similar to before, we'll use `$SG1` to represent this address to make following along easier.**

              ## Install Sync Gateway

              - As with Couchbase Server, we now need to download the Sync Gateway package. Again, if you're using the default RHEL 7 AMI, you'll need to install `wget` first:

                ```bash
                $ sudo yum install wget -y
                ```

              - Then actually download and install the package:


                ```bash
                $ wget http://packages.couchbase.com/releases/couchbase-sync-gateway/1.5.0/couchbase-sync-gateway-enterprise_1.5.0_x86_64.rpm
                ```

                ```bash
                $ sudo rpm -i couchbase-sync-gateway-enterprise_1.5.0_x86_64.rpm
                ```

              ## Connect to Sync Gateway

              - That's it, Sync Gateway is now running on this machine. We can check this easily either by using `curl` from the local machine (i.e. inside the `ssh` session):

                ```bash
                $ curl http://localhost:4984/

                {"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1.5},"version":"Couchbase Sync Gateway/1.5.0(594;e78dbf1)"}
                ```

              or by either opening the URL in a browser:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/sg_browser.png)

              - Although we still need to configure Sync Gateway to connect to Couchbase Server, it's already running with the default config. That includes an in memory (`walrus:`) database called `db`. We can have a quick play with this to confirm everything is working as expected.


                - First, check the database is really there:

                  ```bash
                  $ curl http://localhost:4984/db/

                  {"committed_update_seq":1,"compact_running":false,"db_name":"db","disk_format_version":0,"instance_start_time":1507203061736649,"purge_seq":0,"state":"Online","update_seq":1
                  ```

                - Now let's check the changes feed:

                  ```bash
                  $ curl http://localhost:4984/db/_changes

                  {"results":[
                  {"seq":1,"id":"_user/","changes":[{"rev":""}]}
                  ],
                  "last_seq":"1"}
                  ```

                - Not too much there yet, but we can easily add some documents:

                  ```bash
                  $ curl -X PUT http://localhost:4984/db/test_doc -d '{"I am a document": "with a specific name"}' -H 'Content-type: application/json'

                  {"id":"test_doc","ok":true,"rev":"1-838820c27155617e58bef130c14a844a"}
                  ```

                  ```bash
                  $ curl -X POST http://localhost:4984/db/ -d '{"I am a document": "without a specific name", "could I please have": "a UUID?"}' -H 'Content-type: application/json'

                  {"id":"d6e43b47392ca2e7941744931c250f51","ok":true,"rev":"1-71abb654c47904d0965ff5f1f6fafa72"}
                  ```

                  ```bash
                  $ curl http://localhost:4984/db/_changes?include_docs=true

                  {"results":[
                  {"seq":1,"id":"_user/","changes":[{"rev":""}]}
                  ,{"seq":2,"id":"test_doc","doc":{"I am a document":"with a specific name","_id":"test_doc","_rev":"1-838820c27155617e58bef130c14a844a"},"changes":[{"rev":"1-838820c27155617e58bef130c14a844a"}]}
                  ,{"seq":3,"id":"d6e43b47392ca2e7941744931c250f51","doc":{"I am a document":"without a specific name","_id":"d6e43b47392ca2e7941744931c250f51","_rev":"1-71abb654c47904d0965ff5f1f6fafa72","could I please have":"a UUID?"},"changes":[{"rev":"1-71abb654c47904d0965ff5f1f6fafa72"}]}
                  ],
                  "last_seq":"3"}
                  ```

              - As we're connecting through `localhost`, you'll notice that Sync Gateway's Admin Port (`4985`) is accessible too:

                ```bash
                $ curl http://localhost:4985

                {"ADMIN":true,"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1.5},"version":"Couchbase Sync Gateway/1.5.0(594;e78dbf1)"}
                ```

                By default, the port is only accessible from `localhost` - we could change this to make it a little easier to configure, but it wouldn't be the best security practice!

      - title: Configure
        milestones:
          - title: Configuring Couchbase Server
            description: |
              Now that we've got a Docker container running Couchbase Server, we need to configure it. There are a few options here, we can use the UI, the [REST API](https://developer.couchbase.com/documentation/server/5.0/rest-api/rest-intro.html), or the [CLI](https://developer.couchbase.com/documentation/server/5.0/cli/cli-intro.html). Let's start by looking at the UI as it gives a good sense of what we're doing and why.

              ## Initialise a Couchbase Server Cluster

              - Open the UI in a browser - this should be at http://$CB1:8091/ - and select **Setup New Cluster**

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/welcome_focus.png)

              - The next step is pretty self explanatory. You don't need to worry too much about the cluster name, but we'll be needing the credentials later. All the examples here are going to use `Administrator` and `password`, so use these yourself if you want to be able to copy and paste. If you're using Couchbase Mobile for anything more sensitive than this workshop, maybe try something a bit more secure!

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/cluster_init.png)

              - For the next step, you'll need to accept the Terms and Conditions, and then click **Configure Disk, Memory, Services** (we don't want the defaults in this case).

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/terms_conditions.png)

              - On this page, we want to to disable the Index, Search, and Query Services. We don't need them for now, but there's always the opportunity to add them to the cluster later. As well as this, we want to copy in the Public Address. Everything else is fine as it is - hit **Save & Finish**.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/node_init_aws.png)

              ## Create a Bucket

              - Welcome to the Couchbase Server UI! You can see at the moment we have one node running the Data Service, and not much else going on - so let's add a bucket. Click **Buckets** on the left hand bar, then **ADD BUCKET** in the top right corner. In this case, we'll call our bucket `todo` and stick with the defaults for everything else. You can of course pick a different name for your bucket, but be aware that some of the examples in later lessons may need tweaking to match.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/main_ui.png)

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/bucket_init.png)

              ## Create a User

              - With the bucket created, the last bit of configuration we need to do on the Couchbase Server side is to create a user that Sync Gateway will authenticate with. That might sound like a bit of a strange concept - this isn't front end user, it's just going to be used by Sync Gateway itself. Starting in Couchbase Server 5.0, [Role Based Access Control](https://developer.couchbase.com/documentation/server/5.0/security/security-authorization.html#authorization) is used to control access to all features and functions of the cluster, Sync Gateway therefore needs to authenticate against Couchbase Server just like any other client would. Click **Security** in the left hand bar, then **ADD USER** in the top right corner. We want to use `Couchbase` as the **Authentication Domain** in this workshop. As with the Administrator credentials, you can pick anything here, but if you want to copy and paste the credentials we will be using are `sg_user` and `rb4c_p4ssw0rd`.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/rbac_user.png)

              - As for the roles themselves, we want to give `sg_user` the **Bucket Full Access** role for the `todo` bucket.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/rbac_role.png)

          - title: Configuring Sync Gateway
            description: |
              Previously, we were able to access the Sync Gateway VM we set up and perform some CRUD operations against it; however we were only using a local, in-memory `walrus` instance as the back-end. Now that we've got Couchbase Server set up, let's configure Sync Gateway to connect directly to it.

              ## Check the Current Config

              - First we need to ssh back into the machine running Sync Gateway. Once we're ssh'd in, we can access the Admin API as we did before:

                ```bash
                $ curl localhost:4985

                {"ADMIN":true,"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1.5},"version":"Couchbase Sync Gateway/1.5.0(594;e78dbf1)"}
                ```

              - With this API, we can check the current running config:

                ```bash
                $ curl localhost:4985/_config
                ```

                The output might be a bit awkward to read, but pretty-printed it should look something like this:

                ```json
                {
                  "Interface": "0.0.0.0:4984",
                  "AdminInterface": "127.0.0.1:4985",
                  "log": [
                    "HTTP+"
                  ],
                  "Databases": {
                    "db": {
                      "server": "walrus:data",
                      "pool": "default",
                      "bucket": "db",
                      "name": "db",
                      "users": {
                        "GUEST": {
                          "name": "",
                          "admin_channels": [
                            "*"
                          ],
                          "all_channels": null
                        }
                      }
                    }
                  }
                }
                ```

              ## Add a New Database

              - In the config we can see that there is one Sync Gateway database defined: `db`. Let's add another! We could use the Admin REST API for this, but we really want the config to persist across reboots, so it's better to edit the config file on disk at `/home/sync_gateway/sync_gateway.json`. By default the VM won't have much choice in terms of editors, so if you'd rather not use `vi`, feel free to install something you're more comfortable with - the `ec2-user` user you're logged in as will have passwordless `sudo` access.

              - `sync_gateway.json` will have a very similar structure to the output of the `_config` endpoint, but with fewer entries (many are added as defaults at runtime). We just need to add another database under the `databases` property. All the properties here should be reasonable self explanatory, but you can find the full list of options and descriptions in [our documentation](https://developer.couchbase.com/documentation/mobile/current/guides/sync-gateway/config-properties/index.html).

                ```json
                "todo": {
                  "server": "http://ec2-111-111-111-111.compute-1.amazonaws.com:8091",
                  "bucket": "todo",
                  "username": "sg_user",
                  "password": "rb4c_p4ssw0rd",
                  "users": {
                    "GUEST": {"disabled": false, "admin_channels": ["*"] }
                  },
                  "import_docs": "continuous",
                  "enable_shared_bucket_access": true
                }
                ```

              - The last two settings (`import_docs` and `enable_shared_bucket_access`) allow us to take advantage of the new features in Couchbase Server 5.0 and Sync Gateway 1.5. In short, this lets you use the [Couchbase SDKs](https://developer.couchbase.com/documentation/server/4.6/sdk/development-intro.html) to access the same data seamlessly.

              - While we're here, let's up the logging output to `*` so we can see more of what's going on in the logs:

                ```json
                "log": ["*"]
                ```

              - Before saving, it's worth double-checking that the file is valid json - commas in particular! `python` has a nice way of doing this inside the VM - any errors will look something like this:

                ```bash
                $ sudo python -m json.tool /home/sync_gateway/sync_gateway.json
                Expecting , delimiter: line 3 column 2 (char 17)
                ```

              ## Load the New Config

              - With the config file updated and syntax error free, we need to restart Sync Gateway to pick it up:

                ```bash
                $ sudo service sync_gateway restart
                ```

                Now when we check the `_config` endpoint, we should see the new database included:

                ```bash
                $ curl localhost:4985/_config -sS | python -m json.tool
                {
                    "AdminInterface": "127.0.0.1:4985",
                    "Databases": {
                        "db": {
                            "bucket": "db",
                            "name": "db",
                            "pool": "default",
                            "server": "walrus:data",
                            "users": {
                                "GUEST": {
                                    "admin_channels": [
                                        "*"
                                    ],
                                    "all_channels": null,
                                    "name": ""
                                }
                            }
                        },
                        "todo": {
                            "bucket": "todo",
                            "name": "todo",
                            "password": "rb4c_p4ssw0rd",
                            "pool": "default",
                            "server": "http://ec2-111-111-111-111.compute-1.amazonaws.com:8091",
                            "username": "sg_user",
                            "users": {
                                "GUEST": {
                                    "admin_channels": [
                                        "*"
                                    ],
                                    "all_channels": null,
                                    "name": ""
                                }
                            }
                        }
                    },
                    "Interface": "0.0.0.0:4984",
                    "log": [
                        "*"
                    ]
                }
                ```

              - We can confirm this in a couple of places. Firstly, we can see that there's now a collection of `/todo/` endpoints (although not much in there yet):

                ```bash
                $ curl localhost:4984/todo/_all_docs
                {"rows":[
                ],
                "total_rows":0,"update_seq":1}
                ```

              - We can also check and see that Sync Gateway has connected to Couchbase Server. If you go to the **Buckets** section, you can click **Documents** to view the contents of the `todo` bucket.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/todo_bucket.png)

              - Here you should now see a handful of documents holding Sync Gateway's metadata:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/todo_docs.png)

              - Congratulations! Sync Gateway is now configured with a Couchbase Server back-end. At this point, you can start connecting apps and persisting the data to Couchbase Server. You've got the basis to build a robust production deployment - more about that in the next lesson!

      - title: Scale
        milestones:
          - title: Scaling Couchbase Server
            description: |
              Having one Couchbase Server node is all well and good, but for High Availability and improved performance, you'll need a cluster.
              Couchbase Server is designed to make this scaling incredibly easy; all you need are a few extra VMs running Couchbase Server and you can scale out the cluster straight from the UI.

              - First, we'll need some more nodes. Follow the same process we did before to bring up two more machines and install Couchbase Server on them. Once this completes, you should see the familiar UI on those new nodes:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/welcome_focus.png)

              ## Join the Cluster with a New Node

              - For the first node, let's add it to the cluster from here. First (as you might have guessed), click **Join Existing Cluster**. Here we want to specify the first node by it's Public Address, which is the only node so far in the cluster we want to join, and the Administrator credentials we set earlier (`Administrator`, `password` if you're following along):

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/join_cluster_aws.png)

              - Before we click through, we also want to only have the Data Service running on this node, we can do this in the same way we did last time under the **Configure Services & Settings For This Node** section. In this section we also want to ensure we set the **This Node: Host Name/IP Address** field to this nodes Public Address:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/join_cluster_detail_aws.png)

              - Finally, click **Join With Custom Configuration**. You should be greeted with a very familiar UI, only now with 2 nodes:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/joined_cluster.png)

              - It's worth noting at this point that you can access and administer the cluster from any of the nodes - you'll notice we're still on the second node.

              ## Add a Third Node to the Cluster

              - We've got one more node to add, let's do it from the cluster itself, rather than from the new node. Click the **Servers** section on the left hand bar, and you can now see the last node we added:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/pending_rebalance.png)

                As the message suggests, this needs Rebalancing into the cluster before it starts taking traffic, but let's wait until we've got both nodes ready before starting the rebalance.

              - In the top right corner, click **ADD SERVER** and then fill in the Public Address of the last node. As this node has not been initialised yet, it doesn't actually have Administrator credentials and we can ignore this. Again, let's add only the Data Service and finally click **Add Server**:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/add_node.png)

              ## Rebalance the Cluster

              - Finally, start a rebalance with the **Rebalance** button and watch it progress.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/rebalancing.png)

              - The key thing to note here is that everything is totally online. All data is available during the rebalance.

          - title: Scaling Sync Gateway
            description: |
              As with Couchbase Server, having one Sync Gateway running is fine, but you'll eventually want to scale out to ensure you have High Availability for a production deployment. Because of the way they're deployed and the functions they serve, Couchbase Server and Sync Gateway scale in different ways. Scaling Sync Gateway requires a Load Balancer in front of it, but as Sync Gateway is essentially stateless we don't need to worry about adding it to a cluster - only adding it behind the Load Balancer.

              - First, we'll need some more nodes. Follow the same process we did before to bring up one more machine and install Sync Gateway on it.

              ## Configure the New Sync Gateway

              - Once Sync Gateway is installed and running, we need to configure it in the same way as the first node (because unlike Couchbase Server, Sync Gateway is not inherently clustered, we need to make sure that the same configuration is used on each node). If we ssh into the current running Sync Gateway node, we can copy out the config we already modified in the last lesson:

                ```bash
                $ ssh ec2-user@$SG1 -i ./Workshop_AWS.pem
                $ sudo cat /home/sync_gateway/sync_gateway.json
                ```

              - We can then update the config on the new node:

                ```bash
                $ ssh ec2-user@$SG2 -i ./Workshop_AWS.pem
                $ sudo vi /home/sync_gateway/sync_gateway.json
                ```

              ## Load the New Config

              - With the config file updated and syntax error free, we need to restart Sync Gateway to pick it up:

                ```bash
                $ sudo service sync_gateway restart
                ```

                Now when we check the `_config` endpoint, we should see the new database included as before:

                ```bash
                $ curl localhost:4985/_config -sS | python -m json.tool
                {
                    "AdminInterface": "127.0.0.1:4985",
                    "Databases": {
                        "db": {
                            "bucket": "db",
                            "name": "db",
                            "pool": "default",
                            "server": "walrus:data",
                            "users": {
                                "GUEST": {
                                    "admin_channels": [
                                        "*"
                                    ],
                                    "all_channels": null,
                                    "name": ""
                                }
                            }
                        },
                        "todo": {
                            "bucket": "todo",
                            "name": "todo",
                            "password": "rb4c_p4ssw0rd",
                            "pool": "default",
                            "server": "http://ec2-111-111-111-111.compute-1.amazonaws.com:8091",
                            "username": "sg_user",
                            "users": {
                                "GUEST": {
                                    "admin_channels": [
                                        "*"
                                    ],
                                    "all_channels": null,
                                    "name": ""
                                }
                            }
                        }
                    },
                    "Interface": "0.0.0.0:4984",
                    "log": [
                        "*"
                    ]
                }
                ```

              ## Load Balancing

              In theory, we could stop here - we've got two Sync Gateways connected to the same Couchbase Server cluster. For some deployments, this might actually be preferable so you can manually partition your traffic by pointing apps at different Sync Gateways (particularly if you're deploying Couchbase Lite in a handful of static locations). For most deployments though, you'll want to be able to dynamically partition traffic across your Sync Gateway nodes - this is where a Load Balancer comes in.

              - As before, we'll want to create a new instance for the load balancer. We can follow the same process and specification for creating this instance.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/ec2_launch.png)

              ## Install NGINX

              - We'll use NGINX as a load balancer for this workshop. First, then, we need to install it on our new instance:

                ```bash
                $ sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
                ```

                ```bash
                $ sudo yum install nginx -y
                ```

              ## Configure NGINX

              - With NGINX installed, we need to give it a configuration to work from. Open a new file:

                ```bash
                $ sudo vi /etc/nginx/conf.d/sync_gateway_nginx.conf
                ```

              - First, let's define the list of servers we want to route requests to:

                Let's add the second Sync Gateway node in:

                ```nginx
                upstream sync_gateway {
                  server ec2-111-111-111-123.compute-1.amazonaws.com:4984;
                  server ec2-111-111-111-124.compute-1.amazonaws.com:4984;
                }
                ```

                This allows NGINX to balance requests between the two nodes.

                The rest of the file deals with how we want NGINX to proxy the requests generally, whether that's to one server or many. It's a little outside the scope of this workshop, but you can find more details in our [documentation](https://developer.couchbase.com/documentation/mobile/current/guides/sync-gateway/nginx/index.html). Copy the following into the file:

                ```nginx
                server {
                    access_log /var/log/nginx/access_log combined;
                    listen 4984;
                    client_max_body_size 21m;
                    location / {
                        proxy_pass              http://sync_gateway;
                        proxy_pass_header       Accept;
                        proxy_pass_header       Server;
                        proxy_http_version      1.1;
                        keepalive_requests      1000;
                        keepalive_timeout       360s;
                        proxy_read_timeout      360s;
                    }
                }
                ```

              ## Load the New Config

              - With `sync_gateway_nginx.conf` updated and saved, we can now start the NGINX service:

                ```bash
                $ sudo service nginx start
                ```

              - Once this is complete, you should be able to make requests to the NGINX instance as though it were Sync Gateway:

                ```bash
                $ curl localhost:4984/todo/_changes
                {"results":[
                {"seq":1,"id":"_user/GUEST","changes":[]}
                ],
                "last_seq":"1"}
                ```

      - title: Extra Credit
        milestones:
          - title: Adding more Couchbase Services
            description: |
              When we scaled out the Couchbase Server cluster, we only used the Data Service, because it was all we really needed. For a production deployment, this is actually what we'd recommend - separating the services to dedicated nodes helps you more easily achieve redundancy for each service as well as letting you scale each service separately as your workload and use case demands. There are a couple of ways we could add more services to this cluster: removing a node and re-adding it with more services enabled; or adding yet more nodes, depending on whether or not you wish to spin up any more nodes in AWS. Ideally, in a production environment, the goal would be to have each service running in isolation on a set of nodes; however this workshop is here to teach about a production environment, not necessarily create a perfect one, so we'll address both options here:

              ## Adding a new node

              - Once you have a new node with Couchbase Server installed, it's as simple as adding this to the cluster in the same way as before, only this time selecting the Index, Search, and Query services instead of the Data Service.

              - If you wanted to try something a bit different, you can use the REST API to add this new node as follows (where `$CB1` is a node in the cluster already and `$CB4` is the new node):

                ```bash
                $ curl -u Administrator:password $CB1:8091/controller/addNode -d 'hostname=$CB4' -d 'services=index,n1ql,fts' -d 'user=Administrator' -d 'password=password'

                {"otpNode":"ns_1@$CB4"}
                ```

              - Now we just need to start a rebalance. We could do this again through the [REST API](https://developer.couchbase.com/documentation/server/4.6/rest-api/rest-cluster-rebalance.html), or through the UI like we have before.

              ## Re-purposing an existing node

              - If taking this option, let's simply remove one of them and re-add it to the cluster with other services enabled. From the UI of any node, click **Remove** for the third node:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/node_remove_aws.png)

              - The node is still serving data, so start a rebalance to remove it from the cluster:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/node_remove_pending_rebalance_aws.png)

              - Once this has completed, go through the **Add Node** process to add it back to the cluster, this time selecting all 4 services:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/node_add_all_services.png)

                Now we just need to start a rebalance. We could do this again through the [REST API](https://developer.couchbase.com/documentation/server/4.6/rest-api/rest-cluster-rebalance.html), or through the UI like we have before.

              - Once the rebalance is complete, you can access the [Query Workbench](https://developer.couchbase.com/documentation/server/5.0/tools/query-workbench.html) on the new node.

          - title: Deploying the Develop Section
            description: |
              In the Develop section of the workshop, you created and *"deployed"* a full Couchbase Mobile app. Let's change "deployed" into Deployed and actually deploy this into a production ready environment.

              Luckily, we've already covered most of the steps for this. At a high level, these are:

              - Load the `travel-sample` bucket on the Couchbase Server cluster.
              - Create a Sync Gateway database that points to the `travel-sample` bucket.
              - Update the app to point to the new Sync Gateway (or, more precisely, Sync Gateways via the Load Balancer)

              There are a few caveats here, and things we haven't covered. Depending on how you performed the previous steps, you might encounter a few complexities in your environment:

              ## Server Quotas, Bucket Quotas, and Other Numbers

              - You may recall when we first initialised the cluster, we set a quota for the Data Service:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/node_init_aws.png)

              - This sets the upper limit for the total quota of every bucket in the cluster. When we created the `todo` bucket, we used up all of this quota with the one bucket, so we have nothing left for `travel-sample`. There are a couple of ways to approach this problem:

                - Delete the `todo` bucket and associated Sync Gateway database.
                - Adjust `todo`'s quota and add `travel-sample` alongside it.

              To do either of these, we need to go to the **Buckets** page in the Couchbase Server UI and click on the `todo` bucket. From here we have the option to **Delete** or **Edit** the bucket:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/bucket_detail.png)

              - The choice is yours, and this being the Extra Credit section, we'll be a bit more sparse with the instructions - we believe in you! (Do feel free to ask though!)

              ## A New Database

              - Either way, you'll need to update the Sync Gateway config file to add the new database. Again, we're sure you can manage to add in the database from the [config file used in Develop](https://github.com/couchbaselabs/mobile-travel-sample/blob/connect_sv/sync-gateway-config-travelsample.json) but do ask if you have questions! Be sure to either set up a user in Couchbase Server that has access to the correct bucket - either by adding this permission to the `sg_user` user we used previously, or by creating a new user for this new bucket and database.

              - Once this is updated, and pointing to the correct Couchbase Server cluster with all the correct permissions, we need to have each Sync Gateway load this new config. We already did this before - loading the new config and restarting each instance in turn, so the same procedure applies here.

              - With more of a production focus, you may well want to utilise a load balancer in front of Sync Gateway to implement the change over, ensuring that at any one time requests are only getting routed to one particular version of the config. You want to avoid a situation where a load balancer may route alternate requests to different Sync Gateways with different configs!
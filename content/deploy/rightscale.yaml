requirements: |
  TODO

chapters:
  - title: Deploy
    lessons:
      - title: Spin Up & Install
        milestones:
          - title: Couchbase Server & Sync Gateway
            description: |

              To deploy Couchbase Mobile to production you must first get familiar with Couchbase Server. While it's certainly possible to run Sync Gateway in isolation for quick and agile development and testing, any production deployment needs Couchbase Server as the back-end. Luckily, connecting the two is incredibly easy. Even more luckily, both Couchbase Server and Sync Gateway are designed to be able to scale out easily and with zero downtime, meaning that we can start with a very small deployment and scale it up later to something that's production ready.

              Couchbase Server can deployed on a whole host of [operating systems](http://www.couchbase.com/nosql-databases/downloads), but for this workshop we'll focus on using CentOS 7.

              ## Spin Up Instances with Rightscale

              In this version of the workshop, we'll connect to private instances of Couchbase Server and Sync Gateway  running in a Rightscale cloud environment. You may have already provisioned one of these environments in the Develop workshop. If so, simply switch to the Deploy tab.
            
              NOTE: This instance will be available for you to use for the duration of the workshop. The instance will automatically be terminated after the workshop. Every user will have their own sandboxed instance.
            
              - Open `https://selfservice-4.rightscale.com/catalog` in your browser

              - Log in with the email address `workshop@couchbase.com` and password `cbworkshop123`

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/rightscale_login.png)

              - From the catalog of available projects, select the "Mobile Workshop 2017" , *give it a name that's unique to you* and then click "Launch".

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/rightscale_selectproject.png)

              - Once instance is running, You should see the state change to "launching". It will take several minutes to launch. So be patient!

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/rightscale_launching.png)

              - Once instance is running, You should see the state change to "running".There are two instances - one for "Develop" and one for "Deploy". We are only interested in the "Deploy" option

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/rightscale_running.png)

              - Here you should see a list of Couchbase Server and Sync Gateway nodes

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/rs_nodes.png)

              - For now, let's check the Couchbase Server instance by going to the hostname of one of those nodes and port `8091`, you should be greeted with this screen

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/welcome_wide.png)
          
          - title: Sync Gateway
            description: |
              Sync Gateway is the middleman server that exposes a database API for Couchbase Lite databases to replicate to and from. It connects internally to a Couchbase Server bucket to persist the documents. Again, in a production environment you would connect it to Couchbase Server, but for now let's have a quick look at the one we just started.

              ## Connect to Sync Gateway

              - We already started the VM in the last step. We can check this easily either by using `curl` and Public Address of one of those instances:

              **N.B. From here on, we'll use `$SG1` to represent this hostname to make following along easier.**

                ```bash
                $ curl http://$SG1:4984/

                {"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1.5},"version":"Couchbase Sync Gateway/1.5.0(594;e78dbf1)"}
                ```

              or by either opening the URL in a browser:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/sg_browser.png)

              - Although we still need to configure Sync Gateway to connect to Couchbase Server, it's already running with the default config. That includes an in memory (`walrus:`) database called `db`. We can have a quick play with this to confirm everything is working as expected.

                - First, check the database is really there:

                  ```bash
                  $ curl http://$SG1:4984/db/

                  {"committed_update_seq":1,"compact_running":false,"db_name":"db","disk_format_version":0,"instance_start_time":1507203061736649,"purge_seq":0,"state":"Online","update_seq":1
                  ```

                - Now let's check the changes feed:

                  ```bash
                  $ curl http://$SG1:4984/db/_changes

                  {"results":[
                  {"seq":1,"id":"_user/","changes":[{"rev":""}]}
                  ],
                  "last_seq":"1"}
                  ```

                - Not too much there yet, but we can easily add some documents:

                  ```bash
                  $ curl -X PUT http://$SG1:4984/db/test_doc -d '{"I am a document": "with a specific name"}' -H 'Content-type: application/json'

                  {"id":"test_doc","ok":true,"rev":"1-838820c27155617e58bef130c14a844a"}
                  ```

                  ```bash
                  $ curl -X POST http://$SG1:4984/db/ -d '{"I am a document": "without a specific name", "could I please have": "a UUID?"}'

                  {"id":"d6e43b47392ca2e7941744931c250f51","ok":true,"rev":"1-71abb654c47904d0965ff5f1f6fafa72"}
                  ```

                  ```bash
                  $ curl http://$SG1:4984/db/_changes?include_docs=true

                  {"results":[
                  {"seq":1,"id":"_user/","changes":[{"rev":""}]}
                  ,{"seq":2,"id":"test_doc","doc":{"I am a document":"with a specific name","_id":"test_doc","_rev":"1-838820c27155617e58bef130c14a844a"},"changes":[{"rev":"1-838820c27155617e58bef130c14a844a"}]}
                  ,{"seq":3,"id":"d6e43b47392ca2e7941744931c250f51","doc":{"I am a document":"without a specific name","_id":"d6e43b47392ca2e7941744931c250f51","_rev":"1-71abb654c47904d0965ff5f1f6fafa72","could I please have":"a UUID?"},"changes":[{"rev":"1-71abb654c47904d0965ff5f1f6fafa72"}]}
                  ],
                  "last_seq":"3"}
                  ```

              - You'll notice that Sync Gateway's Admin Port (`4985`) isn't accessible:

                ```bash
                $ curl http://$SG1:4985
                curl: (7) Failed to connect to 10.150.150.102 port 4985: Connection refused
                ```

                By default, the port is only accessible from `localhost` - we could change this to make it a little easier to configure, but it wouldn't be the best security practice!

      - title: Configure
        milestones:
          - title: Configuring Couchbase Server
            description: |
              Now that we've got a VM running Couchbase Server, we need to configure it. There are a few options here, we can use the UI, the [REST API](https://developer.couchbase.com/documentation/server/5.0/rest-api/rest-intro.html), or the [CLI](https://developer.couchbase.com/documentation/server/5.0/cli/cli-intro.html). Let's start by looking at the UI as it gives a good sense of what we're doing and why.

              ## Initialise a Couchbase Server Cluster

              - Open the UI in a browser (as you did when you first started the cluster) and select *Setup New Cluster*

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/welcome_focus.png)

              - The next step is pretty self explanatory. You don't need to worry too much about the cluster name, but we'll be needing the credentials later. All the examples here are going to use `Administrator` and `password`, so use these yourself if you want to be able to copy and paste. If you're using Couchbase Mobile for anything more sensitive than this workshop, maybe try something a bit more secure!

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/cluster_init.png)

              - For the next step, you'll need to accept the Terms and Conditions, and then click *Configure Disk, Memory, Services* (we don't want the defaults in this case).

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/terms_conditions.png)

              - On this page, we want to to disable the Index, Search, and Query Services. We don't need them for now, but there's always the opportunity to add them to the cluster later. As well as this, we want to copy in the Public Address. Everything else is fine as it is - hit *Save & Finish*.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/node_init_aws.png)

              ## Create a Bucket

              - Welcome to the Couchbase Server UI! You can see at the moment we have one node running the Data Service, and not much else going on - so let's add a bucket. Click *Buckets* on the left hand bar, then *ADD BUCKET* in the top right corner. In this case, we'll call our bucket `todo` and stick with the defaults for everything else. You can of course pick a different name for your bucket, but be aware that some of the examples in later lessons may need tweaking to match.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/main_ui.png)

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/bucket_init.png)

              ## Create a User

              - With the bucket created, the last bit of configuration we need to do on the Couchbase Server side is to create a user that Sync Gateway will authenticate with. That might sound like a bit of a strange concept - this isn't front end user, it's just going to be used by Sync Gateway itself. Starting in Couchbase Server 5.0, [Role Based Access Control](https://developer.couchbase.com/documentation/server/5.0/security/security-authorization.html#authorization) is used to control access to all features and functions of the cluster, Sync Gateway therefore needs to authenticate against Couchbase Server just like any other client would. Click *Security* in the left hand bar, then *ADD USER* in the top right corner. We want to use `Couchbase` as the *Authentication Domain* in this workshop. As with the Administrator credentials, you can pick anything here, but if you want to copy and paste the credentials we will be using are `sg_user` and `rb4c_p4ssw0rd`.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/rbac_user.png)

              - As for the roles themselves, we want to give `sg_user` the *Bucket Full Access* role for the `todo` bucket.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/rbac_role.png)

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/rbac_role.png)

          - title: Configuring Sync Gateway
            description: |
              Previously, we were able to access the Sync Gateway VM we set up and perform some CRUD operations against it; however we were only using a local, in-memory `walrus` instance as the back-end. Now that we've got Couchbase Server set up, let's configure Sync Gateway to connect directly to it.

              ## Check the Current Config

              - First we need to ssh into the machine running Sync Gateway - the credentials here are the same as in the Develop section:

                ```bash
                $ ssh root@$SG1
                ```

              - Once we're ssh'd in, we can first see the Admin API for the first time:

                ```bash
                $ curl localhost:4985

                {"ADMIN":true,"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1.5},"version":"Couchbase Sync Gateway/1.5.0(594;e78dbf1)"}
                ```

              - With this API, we can check the current running config:

                ```bash
                $ curl localhost:4985/_config
                ```

                The output might be a bit awkward to read, but pretty-printed it should look something like this:

                ```json
                {
                  "Interface": "0.0.0.0:4984",
                  "AdminInterface": "127.0.0.1:4985",
                  "log": [
                    "HTTP+"
                  ],
                  "Databases": {
                    "db": {
                      "server": "walrus:data",
                      "pool": "default",
                      "bucket": "db",
                      "name": "db",
                      "users": {
                        "GUEST": {
                          "name": "",
                          "admin_channels": [
                            "*"
                          ],
                          "all_channels": null
                        }
                      }
                    }
                  }
                }
                ```

              ## Add a New Database

              - In the config we can see that there is one Sync Gateway database defined: `db`. Let's add another! We could use the Admin REST API for this, but we really want the config to persist across reboots, so it's better to edit the config file on disk at `/home/sync_gateway/sync_gateway.json`. By default the VM won't have much choice in terms of editors, so if you'd rather not use `vi`, feel free to install something you're more comfortable with - the `vagrant` user you're logged in as will have passwordless `sudo` access.

                `sync_gateway.json` will have a very similar structure to the output of the `_config` endpoint, but with fewer entries (many are added as defaults at runtime). We just need to add another database under the `databases` property. All the properties here should be reasonable self explanatory, but you can find the full list of options and descriptions in [our documentation](https://developer.couchbase.com/documentation/mobile/current/guides/sync-gateway/config-properties/index.html):

                ```json
                "todo": {
                  "server": "http://10.150.150.101:8091",
                  "bucket": "todo",
                  "username": "sg_user",
                  "password": "rb4c_p4ssw0rd",
                  "users": {
                    "GUEST": {"disabled": false, "admin_channels": ["*"] }
                  },
                  "import_docs": "continuous",
                  "enable_shared_bucket_access": true
                }
                ```

                The last two settings (`import_docs` and `enable_shared_bucket_access`) allow us to take advantage of the new features in Couchbase Server 5.0 and Sync Gateway 1.5. In short, this lets you use the [Couchbase SDKs](https://developer.couchbase.com/documentation/server/4.6/sdk/development-intro.html) to access the same data seamlessly.

                While we're here, let's up the logging output to `*` so we can see more of what's going on in the logs:

                ```json
                "log": ["*"]
                ```

                Before saving, it's worth double-checking that the file is valid json - commas in particular! `python` has a nice way of doing this inside the VM - any errors will look something like this:

                ```bash
                $ sudo python -m json.tool /home/sync_gateway/sync_gateway.json
                Expecting , delimiter: line 3 column 2 (char 17)
                ```

              ## Load the New Config

              - With the config file updated and syntax error free, we need to restart Sync Gateway to pick it up:

                ```bash
                $ sudo service sync_gateway restart
                ```

                Now when we check the `_config` endpoint, we should see the new database included:

                ```bash
                $ curl localhost:4985/_config -sS | python -m json.tool
                {
                    "AdminInterface": "0.0.0.0:4985",
                    "Databases": {
                        "db": {
                            "bucket": "db",
                            "name": "db",
                            "pool": "default",
                            "server": "walrus:data",
                            "users": {
                                "GUEST": {
                                    "admin_channels": [
                                        "*"
                                    ],
                                    "all_channels": null,
                                    "name": ""
                                }
                            }
                        },
                        "todo": {
                            "bucket": "todo",
                            "name": "todo",
                            "password": "rb4c_p4ssw0rd",
                            "pool": "default",
                            "server": "http://10.150.150.101:8091",
                            "username": "sg_user",
                            "users": {
                                "GUEST": {
                                    "admin_channels": [
                                        "*"
                                    ],
                                    "all_channels": null,
                                    "name": ""
                                }
                            }
                        }
                    },
                    "Interface": "0.0.0.0:4984",
                    "log": [
                        "*"
                    ]
                }
                ```

              - We can confirm this in a couple of places. Firstly, we can see that there's now a collection of `/todo/` endpoints (although not much in there yet):

                ```bash
                $ curl localhost:4984/todo/_all_docs
                {"rows":[
                ],
                "total_rows":0,"update_seq":1}
                ```

                We can also check and see that Sync Gateway has connected to Couchbase Server. If you go to the *Buckets* section, you can click *Documents* to view the contents of the `todo` bucket.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/todo_bucket.png)

                Here you should now see a handful of documents holding Sync Gateway's metadata:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/todo_docs.png)

              Congratulations! Sync Gateway is now configured with a Couchbase Server back-end. At this point, you can start connecting apps and persisting the data to Couchbase Server. You've got the basis to build a robust production deployment - more about that in the next lesson!

      - title: Scale
        milestones:
          - title: Scaling Couchbase Server
            description: |
              Having one Couchbase Server node is all well and good, but for High Availability and improved performance, you'll need a cluster.
              Couchbase Server is designed to make this scaling incredibly easy; all you need are a few extra machines running Couchbase Server and you can scale out the cluster straight from the UI.

              - First, we'll need some more nodes. Luckily, we've already got two ready and waiting. At either of these, you should see the familiar UI at port `8091`:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/welcome_focus.png)

              ## Join the Cluster with a New Node

              - For the first node, let's add it to the cluster from here. First (as you might have guessed), click *Join Existing Cluster*. Here we want to specify the first node, which is the only node so far in the cluster we want to join, and the Administrator credentials we set earlier (`Administrator`, `password` if you're following along):

               ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/join_cluster_aws.png)

              - Before we click through, we also want to only have the Data Service running on this node, we can do this in the same way we did last time under the *Configure Services & Settings For This Node* section:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/join_cluster_detail.png)

              - Finally, click *Join With Custom Configuration*. You should be greeted with a very familiar UI, only now with 2 nodes:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/joined_cluster.png)

              - It's worth noting at this point that you can access and administer the cluster from any of the nodes - you'll notice we're still on the second node.

              ## Add a Third Node to the Cluster

              - We've got one more node to add, let's do it from the cluster itself, rather than from the new node. Click the *Servers* section on the left hand bar, and you can now see the last node we added:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/pending_rebalance.png)

                As the message suggests, this needs Rebalancing into the cluster before it starts taking traffic, but let's wait until we've got both nodes ready before starting the rebalance.

              - In the top right corner, click *ADD SERVER* and then fill in the Public Address of the last node. As this node has not been initialised yet, it doesn't actually have Administrator credentials and we can ignore this. Again, let's add only the Data Service and finally click *Add Server*:

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/add_node.png)

              ## Rebalance the Cluster

              - Finally, start a rebalance with the *Rebalance* button and watch it progress.

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/deploy/assets/rebalancing.png)

              - The key thing to note here is that everything is totally online. All data is available during the rebalance.


          - title: Scaling Sync Gateway
            description: |
              As with Couchbase Server, having on Sync Gateway running is fine, but you'll eventually want to scale out to ensure you have High Availability for a production deployment. Because of the way they're deployed and the functions they serve, Couchbase Server and Sync Gateway scale in different ways. Scaling Sync Gateway requires a Load Balancer in front of it, but as Sync Gateway is essentially stateless we don't need to worry about adding it to a cluster - only adding it behind the Load Balancer.

              ## Configure the New Sync Gateway

              - Because unlike Couchbase Server, Sync Gateway is not inherently clustered, we need to make sure that the same configuration is used on each node., we need to configure it in the same way as the first node. If we ssh into the current running Sync Gateway node, we can copy out the config we already modified in the last lesson:

                ```bash
                $ ssh root@$SG1
                $ sudo cat /home/sync_gateway/sync_gateway.json
                ```

              - We can then update the config on the new node:

                ```bash
                $ ssh root@$SG2
                $ sudo vi /home/sync_gateway/sync_gateway.json
                ```

              ## Load the New Config

              - With the config file updated and syntax error free, we need to restart Sync Gateway to pick it up:

                ```bash
                $ sudo service sync_gateway restart
                ```

              ## Load Balancing

              In theory, we could stop here - we've got two Sync Gateways connected to the same Couchbase Server cluster. For some deployments, this might actually be preferable so you can manually partition your traffic by pointing apps at different Sync Gateways (particularly if you're deploying Couchbase Lite in a handful of static locations). For most deployments though, you'll want to be able to dynamically partition traffic across your Sync Gateway nodes - this is where a Load Balancer comes in. This Rightscale setup doesn't have that readily available, but feel free to have a look at our other sections (*Local VMs with Vagrant* & *AWS EC2 / Bring Your Own Instances*) where this is available to test with.

      - title: Extra Credit
        milestones:
          - title: Adding more Couchbase Services
            description: |
              When we scaled out the Couchbase Server cluster, we only used the Data Service, because it was all we really needed. For a production deployment, this is actually what we'd recommend - separating the services to dedicated nodes helps you more easily achieve redundancy for each service as well as letting you scale each service separately as your workload and use case demands. There are a couple of ways we could add more services to this cluster: removing a node and re-adding it with more services enabled; or adding yet more nodes.

              - Given that we've only got 3 nodes at the moment, let's simply remove one of them and re-add it to the cluster with other services enabled. From the UI of any node, click *Remove* for the third node:

                ![]()

              - The node is still serving data, so start a rebalance to remove it from the cluster:

                ![]()

              - Once this has completed, go through the *Add Node* process to add it back to the cluster, this time selecting all 4 services:

                ![]()

              - Now we just need to start a rebalance. We could do this again through the [REST API](https://developer.couchbase.com/documentation/server/4.6/rest-api/rest-cluster-rebalance.html), or through the UI like we have before.

              - Once the rebalance is complete, you can access the [Query Workbench](https://developer.couchbase.com/documentation/server/5.0/tools/query-workbench.html) on the new node.